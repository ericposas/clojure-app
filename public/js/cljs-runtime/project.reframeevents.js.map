{"version":3,"sources":["project/reframeevents.cljs"],"mappings":"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","names":["G__13418","G__13419","re-frame.core/reg-sub","state","G__13420","G__13421","re_frame.core.reg_event_db","p__13422","vec__13423","cljs.core.nth","_","result","G__13426","re-frame.core/dispatch","cljs.core.assoc","p__13427","vec__13428","status","re_frame.core.reg_event_fx","p__13431","vec__13432","creds","G__13438","G__13439","re-frame.core/reg-fx","auth","p1__13435#","p1__13436#","p2__13437#","ajax.core.GET","G__13440","cljs.core.print","G__13441","G__13442","G__13443","promesa.protocols/-bind","promesa.protocols/-promise","___13191__auto__","___13176__auto__","___13175__auto__","response","js/module$myJSLib.jsGet","G__13444","clj-json","cljs.core.js__GT_clj","G__13445","G__13446","p__13447","vec__13448","rand-abil","G__13451","G__13452","cljs.core/deref","player-sub","G__13453","re-frame.core/subscribe","rand-cnt","cljs.core/rand-int","cljs.core/count","player-object","cljs.core.get","char-abilities","char-name","G__13454","G__13455","abils","G__13456"],"sourcesContent":["(ns project.reframeevents\n  (:require [re-frame.core :refer [reg-event-fx reg-fx reg-event-db reg-sub dispatch subscribe]]\n            [ajax.core :refer [GET]]\n            [promesa.core :as promesa]\n            [\"../myJSLib.js\" :as jsLib :refer [jsGet]]))\n\n(reg-sub\n :status\n (fn [state]\n   (:status state)))\n\n(reg-sub\n :players\n (fn [state]\n   (:players state)))\n\n(reg-event-db\n :store-players-in-app-state\n (fn [state [_ result]]\n   (dispatch [:set-status \"done\"])\n   (assoc state :players (:rows result))))\n\n(reg-event-db ;; db events return state to the app-db\n :set-status\n (fn [state [_ status]]\n   (assoc state :status status)))\n\n(reg-event-fx ;; fx events return a redux-like plain object to fire off a reg-fx\n :get-players\n (fn [state [_ creds]]\n   {:get-players-with-js creds})) ;; using axios within my js module\n  ;;  {:get-players-from-couch creds} ;; ajax clojure lib\n\n(reg-fx\n :get-players-from-couch\n (fn [auth]\n   (GET \"http://localhost:5984/players/_design/players/_view/all\" {:response-format :json\n                                                                   :keywords? true\n                                                                   :handler #(dispatch [:store-players-in-app-state %])\n                                                                   :error-handler #(print %1 %2)\n                                                                   :headers {:authorization auth\n                                                                             :content-type \"application/json\"}})\n   (dispatch [:set-status \"retrieving..\"])))\n\n(reg-fx\n :get-players-with-js\n (fn [auth]\n   (promesa/let [response (jsGet \"http://localhost:5984/players/_design/players/_view/all\" auth)]\n     (dispatch [:set-status \"fetching data...\"])\n     (let [clj-json (js->clj response :keywordize-keys true)]\n       (if (:error clj-json)\n         (do\n           (print \"got an error in js axios fetch!\")\n           (dispatch [:store-players-in-app-state {:rows [{:key {:name \"error!\"}}]}]))\n         (do\n           (print \"got response with imported js module and promesa promise resolver,\\nused #(js->clj % :keywordize-keys true) to normalize clojure data structure\")\n           (dispatch [:store-players-in-app-state clj-json])))))))\n\n(reg-event-db\n :set-new-random-ability\n (fn [state [_ rand-abil]]\n   (print rand-abil)\n   (assoc state :random-ability rand-abil)))\n\n(reg-sub\n :derived-state\n (fn [state]\n   (let [player-sub @(subscribe [:players])\n         rand-cnt (rand-int (count player-sub))\n         player-object (:key (get player-sub rand-cnt))\n         char-abilities (:abilities player-object)\n         char-name (:name player-object)]\n     {:char-name char-name :char-abilities char-abilities})))\n\n(reg-sub\n :current-random-ability ;; instead of setting state after a render (was causing state to be out-of-sync), \n                            ;; we'll instead get the values we need from derived data just like :char-abilites and :char-name\n (fn [state]\n   (let [abils (:char-abilities @(subscribe [:derived-state]))\n         rand-cnt (rand-int (count abils))]\n     (get abils rand-cnt))))"]}