shadow$provide.module$node_modules$axios$lib$core$mergeConfig=function(global,require,module,exports){var utils=require("module$node_modules$axios$lib$utils");module.exports=function(config1,config2){function getMergedValue(target,source){return utils.isPlainObject(target)&&utils.isPlainObject(source)?utils.merge(target,source):utils.isPlainObject(source)?utils.merge({},source):utils.isArray(source)?source.slice():source}function mergeDeepProperties(prop){if(!utils.isUndefined(config2[prop]))return getMergedValue(config1[prop],
config2[prop]);if(!utils.isUndefined(config1[prop]))return getMergedValue(void 0,config1[prop])}function valueFromConfig2(prop){if(!utils.isUndefined(config2[prop]))return getMergedValue(void 0,config2[prop])}function defaultToConfig2(prop){if(!utils.isUndefined(config2[prop]))return getMergedValue(void 0,config2[prop]);if(!utils.isUndefined(config1[prop]))return getMergedValue(void 0,config1[prop])}function mergeDirectKeys(prop){if(prop in config2)return getMergedValue(config1[prop],config2[prop]);
if(prop in config1)return getMergedValue(void 0,config1[prop])}config2=config2||{};var config={},mergeMap={url:valueFromConfig2,method:valueFromConfig2,data:valueFromConfig2,baseURL:defaultToConfig2,transformRequest:defaultToConfig2,transformResponse:defaultToConfig2,paramsSerializer:defaultToConfig2,timeout:defaultToConfig2,timeoutMessage:defaultToConfig2,withCredentials:defaultToConfig2,adapter:defaultToConfig2,responseType:defaultToConfig2,xsrfCookieName:defaultToConfig2,xsrfHeaderName:defaultToConfig2,
onUploadProgress:defaultToConfig2,onDownloadProgress:defaultToConfig2,decompress:defaultToConfig2,maxContentLength:defaultToConfig2,maxBodyLength:defaultToConfig2,beforeRedirect:defaultToConfig2,transport:defaultToConfig2,httpAgent:defaultToConfig2,httpsAgent:defaultToConfig2,cancelToken:defaultToConfig2,socketPath:defaultToConfig2,responseEncoding:defaultToConfig2,validateStatus:mergeDirectKeys};utils.forEach(Object.keys(config1).concat(Object.keys(config2)),function(prop){var merge=mergeMap[prop]||
mergeDeepProperties,configValue=merge(prop);utils.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue)});return config}}
//# sourceMappingURL=module$node_modules$axios$lib$core$mergeConfig.js.map
