{"version":3,"sources":["lein_reagent_reframe/core.cljs"],"mappings":"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","names":["lein-reagent-reframe.core/some-toks","cljs.core.map","cljs.core/random-uuid","cljs.core.range","lein-reagent-reframe.core/calculaysh","n","v","cljs.core/rand-int","lein-reagent-reframe.core/mapped-vals","cljs.core.print","cljs.core.get","cljs.core/to-array","lein-reagent-reframe.core/log-a-map","sequence","mapped","seq__12401","cljs.core/seq","chunk__12402","count__12403","i__12404","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","x","js/console","lein-reagent-reframe.core/log-3-toks","seq__12405","chunk__12406","count__12407","i__12408","G__12409","G__12410","re-frame.core/reg-sub","p__12411","map__12412","cljs.core/--destructure-map","token","_","re_frame.core.reg_event_db","p__12413","vec__12414","cljs.core.nth","state","init-state","cljs.core.assoc","G__12417","re-frame.core/dispatch","p__12418","vec__12419","db","arg","new-token","cljs.core/rand-nth","custom-token","p__12422","vec__12423","values","mapped-values","lein-reagent-reframe.core/map-characters-to-abilities","G__12426","G__12427","p__12428","vec__12429","map__12432","test","lein-reagent-reframe.core/extract-by-position-in-list","cljs.core/deref","G__12433","re-frame.core/subscribe","entry","lein-reagent-reframe.core/get-players-count","G__12434","G__12435","G__12436","p__12437","map__12438","random-int","p__12439","vec__12440","value","lein-reagent-reframe.core/ajax-handler","data","G__12443","G__12444","p__12445","map__12446","lein-reagent-reframe.core/error-handler","status","status-text","lein-reagent-reframe.core/button-style","lein-reagent-reframe.core/player-subscription","players","G__12447","player-name","G__12448","player-abilities","G__12449","update-abilities","cljs.core._EQ_","cljs.core.conj","clojure.string.join","lein-reagent-reframe.core/home-page","ajax.core.GET","lein-reagent-reframe.core/mount-root","reagent.dom.render","js/document","lein-reagent-reframe.core/init!"],"sourcesContent":["(ns lein-reagent-reframe.core\n  (:require\n   [cljs.spec.alpha :as s]\n   [reagent.core :as r]\n   [reagent.dom :as d]\n   [re-frame.core :as rf :refer [reg-sub reg-fx reg-event-fx reg-event-db subscribe dispatch]]\n   [ajax.core :as ajax :refer [GET POST]]))\n\n;; -------------------------\n;; Reframe\n\n\n(def some-toks (map random-uuid (range 200)))\n\n(defn calculaysh\n  [n]\n  (let [v (* n (rand-int 1000))]\n    v))\n\n(def mapped-vals (map calculaysh (range 10)))\n(print mapped-vals)\n(print (get (to-array mapped-vals) 2))\n\n(defn log-a-map\n  [sequence]\n  (let [mapped (map calculaysh sequence)]\n    (doseq\n     [x mapped]\n      (.log js/console x))))\n\n(defn log-3-toks\n  []\n  (doseq\n   [n (range 3)]\n    (print (get (to-array some-toks) n))))\n\n(reg-sub\n :get-token\n (fn [{:keys [token]} _]\n   token))\n\n(reg-event-db\n :init-db\n (fn [state [_ init-state]]\n   (assoc state :players init-state)))\n\n(dispatch [:init-db {}])\n\n(reg-event-db\n :set-random-token\n (fn [db [_ arg]]\n   (let [new-token (assoc db :token (rand-nth some-toks))\n         custom-token (if (some? arg) (assoc db :token arg) nil)]\n     (if (some? custom-token) custom-token new-token))))\n\n;; -------------------------\n;; Initialize app\n\n(reg-event-db\n :set-player-values\n (fn [state [_ values]]\n   (let [mapped-values (map map-characters-to-abilities values)]\n     (print mapped-values)\n     (assoc state :players mapped-values))))\n\n(reg-sub\n :return-all-state\n (fn [state [_ {:keys [test]}]]\n   (print state)\n   state))\n\n(defn extract-by-position-in-list\n  [n]\n  (let [state @(subscribe [:return-all-state])\n        entry (get (to-array (:players state)) n)]\n    entry))\n\n(defn get-players-count\n  []\n  (count (:players @(subscribe [:return-all-state]))))\n\n(reg-sub\n :get-random-int\n (fn [{:keys [random-int]}]\n   random-int))\n\n(reg-event-db\n :set-random-int\n (fn [db [_ value]]\n   (assoc db :random-int value)))\n\n(defn ajax-handler\n  [data]\n  (dispatch [:set-random-int (rand-int (count (:rows data)))])\n  (dispatch [:set-player-values (:rows data)]))\n\n(defn error-handler\n  [{:keys [status status-text]}]\n  (.log js/console (str status status-text)))\n\n(def button-style {:color \"#fff\"\n                   :border \"none\"\n                   :margin \"10px\"\n                   :background-color \"blue\"\n                   :border-radius \"3px\"\n                   :font-size \"1rem\"\n                   :padding \"1rem\"\n                   :cursor \"pointer\"})\n\n(defn player-subscription\n  \"Processes players in our application state and returns a formatted string\"\n  []\n  (let [players (get (to-array (:players @(subscribe [:return-all-state]))) 0)\n        player-name (:name (extract-by-position-in-list @(subscribe [:get-random-int])))\n        player-abilities (get (extract-by-position-in-list @(subscribe [:get-random-int])) :abilities)\n        update-abilities (if (= player-name \"Fox McCloud\") (conj player-abilities \"Team Starfox\") (if (= player-name \"Capt. Falcon\") (conj player-abilities \"Blue Falcon\") player-abilities))]\n    (if (some? players)\n      (str (clojure.string/join \" \" [(clojure.string/join \"'\" [player-name \"s\"]) \"abilities are: \" update-abilities])) nil)))\n\n(defn home-page\n  []\n  [:div\n   [:button {:on-click #(log-3-toks)} \"Log first 3 toks\"]\n   [:br]\n   [:button {:on-click #(print (rand-nth some-toks))} \"Log random tok\"]\n   [:br]\n   [:button {:on-click #(GET  \"http://127.0.0.1:5984/players/_design/players/_view/all\" {:response-format :json\n                                                                                         :keywords? true\n                                                                                         :headers {:Accept \"application/json\"\n                                                                                                   :Authorization \"Basic YWRtaW46cGFzcw==\"} ;; <-- admin:pass base64 encoded\n                                                                                         :handler ajax-handler\n                                                                                         :error-handler error-handler})\n             :style button-style} \"Get a random character value from the CouchDB docs\"]\n\n   [:br]\n   [:br]\n   [:div (player-subscription)]\n   [:br]\n   [:br]])\n\n\n;; NOTES\n\n;; access a value in a list with (nth)\n;; (nth `(1 33 90) 1)\n;; => 33\n\n;; update a value in a vector with (conj)\n;; (conj [\"one\" \"two\" \"tree\"] \"tree-fitty\")\n;; => [\"one\" \"two\" \"tree\" \"tree-fitty\"]\n\n;; get a nested value -- this gets {:b {:c VALUE }}\n;; (get-in {:a 0 :b {:c \"ho hum\"}} [:b :c])\n; => \"ho hum\"\n\n\n(defn mount-root []\n  (d/render\n   [home-page]\n   (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}