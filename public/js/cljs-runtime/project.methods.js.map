{"version":3,"sources":["project/methods.cljs"],"mappings":";AAEA,yCAAA,zCAAMA,yFACHC;AADH,AAEE,mDAAK,AAAA,mFAAO,AAAA,kFAAMA;;AAEpB,AAAA,uCAAA,8CAAAC,rFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMD,gFAEFE;AAFJ,AAGG,8GAAA,vGAACC,8HAA6BD;;;AAHjC,CAAA,qEAAA,rEAAMF,gFAIFE,KAAKE;AAJT,AAKG,8GAAA,vGAACD,8HAA6BD,KAAKE;;;AALtC,CAAA,qEAAA,rEAAMJ;AAAN,AAOG,8GAAA,vGAACG;;;AAPJ,CAAA,+DAAA,/DAAMH;;AAAN,AASA,AAAA,6BAAA,oCAAAF,jEAAMY;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,gEAAAF;;;AAAA,AAAA,CAAA,kEAAA,lEAAME,6EACDI;AADL,AAEE,yDAAA,lDAACC,sDAAwBD;;;AAF3B,CAAA,qDAAA,rDAAMJ;;AAAN;AAAA,CAAA,+CAAA,WAAAC,1DAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAIA,iCAAA,wCAAAK,zEAAMG;AAAN,AAAA,IAAAF,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEACIG;UADJ,AAAAF,4CAAAD,WAAA,IAAA,jEACQI;WADR,AAAAH,4CAAAD,WAAA,IAAA,lEACYK;AADZ,AAEE,QAAA,kBAAuB,kDAAA,IAAA,tDAACP,yIAAyBK,IAAIC,IAAIC;;AAE3D,6BAAA,oCAAAC,iBAAAC,lFAAKC;AAAL,AAAgB,QAAAF,mBAAAC;;AAEhB,+BAAA,/BAAME,qEACHC,GAAGC;AADN,QAEMC,AACA,wBAAiBF,xBACjB,RACA,gDAAM,kDAAA,lDAACZ,uDAAyBa;;AAEtC,oCAAA,pCAAME,+EACHC,KAAKC;AADR,AAEE,WAAA,PAAOC;eAAP,XACOC;;AADP,AAEE,GAAI,CAAG,QAAA,PAAGD,cAAQ,AAACE,gBAAMJ;AACvB,AAAI,QAAA,PAAKE;;AACL,IAAMG,OAAK,AAAA,mFAAO,AAAA,kFAAM,AAACC,4CAAIN,KAAKE;IAC5BK,uBAAqB,AAACC,6CAAKL,SAASE;AAD1C,AAEE,eAAO,QAAA,PAAKH;eAAMK;;;;;AAExB,AAAI,uGAAA,vGAACnC,uHAAsB+B;;AAAU,QAACF,yCAAAA,mDAAAA,ZAASE,+BAAAA","names":["project.methods/map-characters-to-vec","char","var_args","G__14507","project.methods/some-arity-function","js/Error","arg1","cljs.core.print","arg2","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","project.methods/rest-args","seq14508","self__5755__auto__","cljs.core/seq","args-list","clojure.string.join","p__14509","vec__14510","cljs.core.nth","project.methods/vec-destrucsh","one","two","tree","p1__14513#","p2__14514#","project.methods/some-anon","project.methods/set-element","id","vec-content","js/document","project.methods/do-a-loopty-loop","list","callback","iter","acc-list","cljs.core/count","name","cljs.core.get","compiled-list-so-far","cljs.core.conj"],"sourcesContent":["(ns project.methods)\n\n(defn map-characters-to-vec\n  [char]\n  (str (:name (:key char))))\n\n(defn some-arity-function ;; \"arity\" refers to number of arguments a function can take\n    ;; this is how you would overload a method with different method signatures\n  ([arg1]\n   (print \"This is arity of one\" arg1))\n  ([arg1 arg2]\n   (print \"This is arity of two\" arg1 arg2))\n  ([]\n   (print \"This is arity of 0 -- no args\")))\n\n(defn rest-args\n  [& args-list]\n  (clojure.string/join \" \" args-list))\n\n(defn vec-destrucsh\n  [[one two tree]]\n  (str \"your args are: \" (clojure.string/join \" \" [one two tree])))\n\n(def some-anon #(+ %1 %2))\n\n(defn set-element\n  [id vec-content]\n  (-> js/document\n      (.getElementById id)\n      (.-innerHTML)\n      (set! (clojure.string/join \", \" vec-content))))\n\n(defn do-a-loopty-loop\n  [list callback]\n  (loop [iter 0\n         acc-list []] ;; args passed to the loop\n    (if (< (+ iter 1) (count list))\n      (do (inc iter)\n          (let [name (:name (:key (get list iter)))\n                compiled-list-so-far (conj acc-list name)]\n            (recur (inc iter) compiled-list-so-far))) ;; \"recur\" fires the loop again with a newly supplied/incremented args\n                                                      ;; (usually to control the iterator or accumulator value)\n      (do (print \"looping done!\" acc-list) (callback acc-list)))))\n"]}