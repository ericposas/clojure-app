shadow$provide.module$node_modules$axios$lib$helpers$validator=function(global,require,module,exports){var VERSION=require("module$node_modules$axios$lib$env$data").version,AxiosError=require("module$node_modules$axios$lib$core$AxiosError"),validators={};"object boolean number function string symbol".split(" ").forEach(function(type,i){validators[type]=function(thing){return typeof thing===type||"a"+(1>i?"n ":" ")+type}});var deprecatedWarnings={};validators.transitional=function(validator,version,
message){function formatMessage(opt,desc){return"[Axios v"+VERSION+"] Transitional option '"+opt+"'"+desc+(message?". "+message:"")}return function(value,opt,opts){if(!1===validator)throw new AxiosError(formatMessage(opt," has been removed"+(version?" in "+version:"")),AxiosError.ERR_DEPRECATED);version&&!deprecatedWarnings[opt]&&(deprecatedWarnings[opt]=!0,console.warn(formatMessage(opt," has been deprecated since v"+version+" and will be removed in the near future")));return validator?validator(value,
opt,opts):!0}};module.exports={assertOptions:function(options,schema,allowUnknown){if("object"!==typeof options)throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);for(var keys=Object.keys(options),i=keys.length;0<i--;){var opt=keys[i],validator=schema[opt];if(validator){var value=options[opt];validator=void 0===value||validator(value,opt,options);if(!0!==validator)throw new AxiosError("option "+opt+" must be "+validator,AxiosError.ERR_BAD_OPTION_VALUE);}else if(!0!==
allowUnknown)throw new AxiosError("Unknown option "+opt,AxiosError.ERR_BAD_OPTION);}},validators}}
//# sourceMappingURL=module$node_modules$axios$lib$helpers$validator.js.map
