{"version":3,"sources":["project/components.cljs"],"mappings":";AAMA,+BAAA,2CAAA,uDAAA,jIAAKA;AAEL,4CAAA,oDAAAC,hGAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEACWI;cADX,AAAAF,4CAAAF,eAAA,rEACgBK;AADhB,AAAA,0FAAA,iDAAA,mFAAA,mDAGS,CAAA,8DAAA,NAAiBD,sEAAyBC;;AAEnD;;;wCAAA,xCAAMC,wFAEHF;AAFH,AAGE,yDAAA,GAAA,mFAAA,xIAACG,sLAAuD,4FAAA,1FAAI,uEAAA,vEAACC,6CAAE,AAACC,oBAAKL,+EACT,yFAAA,vFAAI,uEAAA,vEAACI,6CAAE,AAACC,oBAAKL,2DACT,EAAI,uEAAA,vEAACI,6CAAE,AAACC,oBAAKL,oBAAmB,sDAAA,rDAAK,AAACK,oBAAK,AAACC,0BAAWN,0BACnD,mFAAA,jFAAI,uEAAA,vEAACI,6CAAE,AAACC,oBAAKL,yCACT,2BAAA,1BAAK,AAACK,oBAAKL;;AAErF,mCAAA,2CAAAO,9EAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;WAAA,AAAAV,4CAAAU,eAAA,lEACWR;AADX,AAAA,0FAAA,iDAAA,mFAAA,mDAAA,2CAAA,gGAAA,5CAGe,AAACE,sCAAmBF,6DAAaN;;AAEhD;;;qCAAA,rCAAMgB;AAAN,AAGE,GAAI,GAAA,CAAA,AAAAC,gBAAQ,iBAAAC,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACC,wDAAAA,kEAAAA;SAAT;AAAJ,0FAAA,qDAAA,2CAAA,kDAAA,WAAA,6DAEoB;AAAA,AAAO,cAAA,AAAAF,VAAMI,0BAAS,iBAAAC,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACH,wDAAAA,kEAAAA;;SAAhB,WAAAC,hBACMG;AADN,AACU,oCAAA,WAAAH,xCAACI;;AADX,AAEE,OAACC,kCAAiCJ,QAAQE;GAJvE,uDAAA,2CAAA,yDAAA,0BAKsC,AAAC;AAAA,AAAA;;;AALvC;;;AAOF,6CAAA,2CAAA,uDAAA,QAAA,yDAAA,UAAA,gEAAA,QAAA,uDAAA,cAAA,iEAAA,SAAA,sEAAA,MAAA,2DAAA,cAAA,4EAAA,lpBAAKG;AASL,uCAAA,vCAAMC;AAAN,AAAA,0FAAA,mDAAA,2CAAA,6DAEmB;AAAA,AAAO,IAAAC,WAAA,mFAAA,mEAAsCE;AAAtC,AAAA,oHAAAF,6CAAAA,zJAACC,uDAAAA,iEAAAA;GAF3B,0GAAA,nDAGgBH","names":["project.components/img-style","p__15503","map__15504","cljs.core/--destructure-map","cljs.core.get","project.components/rand-ability-component","name","ability","project.components/get-img-src-string","clojure.string.join","cljs.core._EQ_","clojure.string/trim","clojure.string/lower-case","p__15505","map__15506","project.components/image-element","project.components/loopy-component","cljs.core/deref","G__15508","re-frame.core/subscribe","p1__15507#","players","G__15509","cb","project.methods/set-element","project.methods/do-a-loopty-loop","project.components/fetch-data-button-style","project.components/fetch-data-button","G__15510","re-frame.core/dispatch","project.config/api-creds"],"sourcesContent":["(ns project.components\n  (:require [reagent.core]\n            [project.config :refer [api-creds]]\n            [project.methods]\n            [clojure.string :refer [join trim lower-case]]))\n\n(def img-style {:width \"800px\"})\n\n(defn rand-ability-component\n  [{:keys [name ability]}]\n  [:<>\n   [:div (str \"Selected \" name \" random ability: \" ability)]])\n\n(defn get-img-src-string\n  \"Gets img src string with conditionals depending on character\"\n  [name]\n  (join \"\" [\"https://cdn.gamer-network.net/2018/usgamer/\" (if (= (trim name) \"Captain Falcon\") \"super-smash-bros-ultimate-captain-falcon-screen.png\"\n                                                              (if (= (trim name) \"Fox McCloud\") \"super-smash-bros-ultimate-fox-.png\"\n                                                                  (if (= (trim name) \"Bayonetta\") (str (trim (lower-case name)) \"-1.png\")\n                                                                      (if (= (trim name) \"Kirby\") \"kirby-ultimate.jpg.png\"\n                                                                          (str (trim name) \"-1.png\")))))]))\n\n(defn image-element\n  [{:keys [name]}]\n  [:<>\n   [:img {:src (get-img-src-string name) :style img-style}]])\n\n(defn loopy-component\n  \"A component that calls a \\\"loop\\\" \\\"recur\\\" function and sets some DOM content\"\n  [] ;; below is an example of a conditional render in reagent\n  (if (some? @(re-frame.core/subscribe [:players]))\n    [:span {:id \"loop-div\"\n            :on-click (fn [] (let [players @(re-frame.core/subscribe [:players])\n                                   cb #(project.methods/set-element \"loop-div\" %)]\n                               (project.methods/do-a-loopty-loop players cb))) ;; do-a-loopty-loop accepts a vector and a callback method\n            :style {:cursor \"pointer\"}} ((fn [] \"loop thru chars\"))]))\n\n(def fetch-data-button-style {:color \"white\"\n                              :cursor \"pointer\"\n                              :font-size \".9rem\"\n                              :width \"fit-content\"\n                              :text-align \"center\"\n                              :border-radius \"3px\"\n                              :padding \".2rem .6rem\"\n                              :background-color \"blue\"})\n\n(defn fetch-data-button\n  []\n  [:div {:on-click (fn [] (re-frame.core/dispatch [:get-players api-creds]))\n         :style fetch-data-button-style} \"Fetch data\"])\n"]}