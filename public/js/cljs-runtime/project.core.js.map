{"version":3,"sources":["project/core.cljs"],"mappings":";;AAiBA,qBAAA,rBAAKA;AAEL;;;2BAAA,3BAAMC;AAAN,AAGE,OAAAC,wBAAA,AAAAC,2BAAA,MAAA,WAAAC;AAAA,AAAA,OAAAF,wBAAA,AAAAC,qIAAA,WAAcG,rHAAS,qBAAA,rBAACC,+EAEAC;AAFxB,AAAA,OAAAN,wBAAA,AAAAC,2BAAA,MAAA,WAAAE;AAAA,AAAA,OAAAF,2BAGE,uGAAA,0CAAA,jJAACM,4KAGA,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAAaG;WAAb,AAAAD,4CAAAF,eAAA,lEAAuBI;AAAvB,AAAA,4DAAA,2CAAA,hDACGA,gHAAiBD;GACpB,4CAAA,5CAACL,gGACI,AAAA,kFACC,qHAAA,2EAAA,hMAACO,0DAAQX;;;;;AAIzB;;;wBAAA,xBAAMa;AAAN,AAAA,OAAAD,gBAGG,iBAAAE,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACC,wDAAAA,kEAAAA;;;AAEJ,mBAAA,nBAAMC;AAAN,AAEE,IAAMN,OAAK,6CAAK,AAAA,6FAAA,AAAAE,gBAAa,iBAAAK,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACF,wDAAAA,kEAAAA;QAAnB;IACLN,YAAU,4CAAK,AAAA,sGAAA,AAAAG,gBAAkB,iBAAAM,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACH,wDAAAA,kEAAAA;;qBADxC,AAAAH,jBAEMO,iCAAgB,iBAAAC,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACL,wDAAAA,kEAAAA;;AAFvB,AAAA,0FAAA,iDAAA,oFAAA,mDAAA,mFAAA,mDAAA,mCAKa,CAAA,uDAAA,AAAAH,gBAAiB,iBAAAS,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACN,wDAAAA,kEAAAA;yBAL/B,mFAAA,wDAAA,mFAAA,mDAAA,4EAAA,wTAAA,mFAAA,wDAAA,gIAAA,mFAAA,wDAAA,mFAAA,kEAAA,mFAAA,uEAAA,mFAAA,wDAAA,mFAAA,wDAAA,6HAAA,2CAAA,0DAAA,0FAAA,mFAAA,gEAAA,8HAAA,mFAAA,wDAAA,mFAAA,wDAAA,mFAAA,lvEAOa,AAACO,gBAAM,AAACT,sDAAwC,kDAAA,lDAACU,uDAAU,4CAAA,5CAACnB,iGAAU,4CAAA,5CAACA,gGAAS,AAACS,iQAEzFW,gUAEMd,qJACAD,2XAGNgB,0IAA8Bf,gEAAcS,qQAE7CO;;AAKN,qBAAA,rBAAeC;AAAf,AAEE,uGAAA,vGAACxB;;AACD,wDAAA,jDAACyB,oIAAoBZ,yBAAK,wBAAA,xBAAiBa","names":["project.core/state","project.core/do-axios-js","promesa.protocols/-bind","promesa.protocols/-promise","___13191__auto__","___13176__auto__","response","js/module$myJSLib.jsGet","project.config/api-creds","cljs.core.print","cljs.core.map","p__13470","map__13471","cljs.core/--destructure-map","cljs.core.get","abilities","name","cljs.core.js__GT_clj","cljs.core/deref","project.core/-players","G__13472","re-frame.core/subscribe","project.core/app","G__13474","G__13476","chosen-ability","G__13477","G__13479","cljs.core/count","clojure.string.join","project.components/fetch-data-button","project.components/rand-ability-component","project.components/loopy-component","project.core/start","reagent.dom.render","js/document"],"sourcesContent":["(ns project.core\n  (:require\n   [project.tutsnotes]\n   [project.reframeevents]\n   [project.methods :refer [map-characters-to-vec do-a-loopty-loop]]\n   [project.components :refer [fetch-data-button\n                               rand-ability-component\n                               loopy-component]]\n   [re-frame.core :refer [dispatch reg-event-fx reg-fx reg-event-db reg-sub subscribe]]\n   [reagent.core]\n   [reagent.dom]\n   [\"axios\" :as axios]\n   [\"../myJSLib.js\" :as jsLib :refer [jsGet]]\n   [promesa.core :as promesa]\n   [ajax.core :refer [GET]]\n   [clojure.string :refer [lower-case trim join]]))\n\n(def state {})\n\n(defn do-axios-js\n  \"Do axios fetch with js module\"\n  []\n  (promesa/let [response (jsGet\n                          \"http://localhost:5984/players/_design/players/_view/all\"\n                          project.config/api-creds)]\n    (print\n     \"successful JS/Clojurescript interop\\n\\n\"\n     \"data from JS api call:\\n\"\n     (map (fn [{:keys [abilities name]}]\n            {name {:abilities abilities}})\n          (map :key\n               (:rows\n                (js->clj response :keywordize-keys true)))))))\n\n;; (do-axios-js)\n\n(defn -players\n  \"Gets reframe state key :players -- the list of Smash chars\"\n  []\n  @(subscribe [:players]))\n\n(defn app\n  []\n  (let [name (str (:char-name @(subscribe [:derived-state])) \" \") ;; get some derived data\n        abilities (str (:char-abilities @(subscribe [:derived-state])))\n        chosen-ability @(subscribe [:current-random-ability])]\n    [:<>\n     [:div\n      [:div {} (str \"status: \" @(subscribe [:status]))]\n      [:br]\n      [:div {} (count (-players)) \" Smash characters loaded: \" (join \", \" (map :name (map :key (-players))))]\n      [:br]\n      [fetch-data-button]\n      [:br]\n      [:span name]\n      [:span abilities]\n      [:br]\n      [:br]\n      [rand-ability-component {:name name :ability chosen-ability}]\n      [:br]]\n     [loopy-component]\n     [:br]\n     [:br]\n     [:br]]))\n\n(defn ^:export start\n  []\n  (print \"app started\")\n  (reagent.dom/render [app] (.getElementById js/document \"app\")))\n"]}