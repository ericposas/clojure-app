{
"version":3,
"file":"module$node_modules$axios$lib$core$dispatchRequest.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY/GC,QAASA,6BAA4B,CAACC,MAAD,CAAS,CACxCA,MAAOC,CAAAA,WAAX,EACED,MAAOC,CAAAA,WAAYC,CAAAA,gBAAnB,EAGF,IAAIF,MAAOG,CAAAA,MAAX,EAAqBH,MAAOG,CAAAA,MAAOC,CAAAA,OAAnC,CACE,KAAM,KAAIC,aAAV,CAN0C,CAT9C,IAAIC,MAAQV,OAAA,CAAQ,qCAAR,CAAZ,CACIW,cAAgBX,OAAA,CAAQ,kDAAR,CADpB,CAEIY,SAAWZ,OAAA,CAAQ,+CAAR,CAFf,CAGIa,SAAWb,OAAA,CAAQ,8CAAR,CAHf;AAIIS,cAAgBT,OAAA,CAAQ,oDAAR,CAqBpBC,OAAOC,CAAAA,OAAP,CAAiBY,QAAwB,CAACV,MAAD,CAAS,CAChDD,4BAAA,CAA6BC,MAA7B,CAGAA,OAAOW,CAAAA,OAAP,CAAiBX,MAAOW,CAAAA,OAAxB,EAAmC,EAGnCX,OAAOY,CAAAA,IAAP,CAAcL,aAAcM,CAAAA,IAAd,CACZb,MADY,CAEZA,MAAOY,CAAAA,IAFK,CAGZZ,MAAOW,CAAAA,OAHK,CAIZX,MAAOc,CAAAA,gBAJK,CAQdd,OAAOW,CAAAA,OAAP,CAAiBL,KAAMS,CAAAA,KAAN,CACff,MAAOW,CAAAA,OAAQK,CAAAA,MADA,EACU,EADV,CAEfhB,MAAOW,CAAAA,OAAP,CAAeX,MAAOiB,CAAAA,MAAtB,CAFe,EAEkB,EAFlB,CAGfjB,MAAOW,CAAAA,OAHQ,CAMjBL,MAAMY,CAAAA,OAAN,CACE,uCAAA,CAAA,KAAA,CAAA,GAAA,CADF,CAEEC,QAA0B,CAACF,MAAD,CAAS,CACjC,OAAOjB,MAAOW,CAAAA,OAAP,CAAeM,MAAf,CAD0B,CAFrC,CASA,OAAO,CAFOjB,MAAOoB,CAAAA,OAEd;AAFyBX,QAASW,CAAAA,OAElC,EAAQpB,MAAR,CAAgBqB,CAAAA,IAAhB,CAAqBC,QAA4B,CAACC,QAAD,CAAW,CACjExB,4BAAA,CAA6BC,MAA7B,CAGAuB,SAASX,CAAAA,IAAT,CAAgBL,aAAcM,CAAAA,IAAd,CACdb,MADc,CAEduB,QAASX,CAAAA,IAFK,CAGdW,QAASZ,CAAAA,OAHK,CAIdX,MAAOwB,CAAAA,iBAJO,CAOhB,OAAOD,SAX0D,CAA5D,CAYJE,QAA2B,CAACC,MAAD,CAAS,CAChClB,QAAA,CAASkB,MAAT,CAAL,GACE3B,4BAAA,CAA6BC,MAA7B,CAGA,CAAI0B,MAAJ,EAAcA,MAAOH,CAAAA,QAArB,GACEG,MAAOH,CAAAA,QAASX,CAAAA,IADlB,CACyBL,aAAcM,CAAAA,IAAd,CACrBb,MADqB,CAErB0B,MAAOH,CAAAA,QAASX,CAAAA,IAFK,CAGrBc,MAAOH,CAAAA,QAASZ,CAAAA,OAHK,CAIrBX,MAAOwB,CAAAA,iBAJc,CADzB,CAJF,CAcA,OAAOG,QAAQC,CAAAA,MAAR,CAAeF,MAAf,CAf8B,CAZhC,CA9ByC,CA5B6D;",
"sources":["node_modules/axios/lib/core/dispatchRequest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$core$dispatchRequest\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar CanceledError = require('../cancel/CanceledError');\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","CanceledError","utils","transformData","isCancel","defaults","module.exports","headers","data","call","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","then","onAdapterResolution","response","transformResponse","onAdapterRejection","reason","Promise","reject"]
}
